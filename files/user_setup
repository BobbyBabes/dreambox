#!/bin/bash

# Create the web root and virtual host
#
# [host]       The first host listed for the site.
# [root_path]  The path to the site root.
# [vhost_file] The path to the vhost files for the site.
# [box_name]   The root config name; used as the certificate and key file names.

trap "do_exit" TERM INT

echo ">>> Begin user_setup"

# Ensure the script is run as SU
if [ "$(whoami)" != "root" ]; then
  echo
  echo "x ... failed! Rerun as root (sudo user_setup)";
  echo
  exit 1
fi

# Catch errors and provide feedback
function e_catch {
  PASS=false
  CLEAN=false

  for opt in $@; do
    case $opt in
            0)  PASS=true             ;;
            *)  MESSAGE=${@%%--clean} ;;
    esac
  done;

  if $PASS; then
    echo " âœ“ ... ${MESSAGE:2}"
  else
    echo
    echo " x ... ${MESSAGE:2} failed!"
    do_exit
  fi
}

function do_exit {
  echo
  echo "${@}"
  echo "Exiting..."
  echo
  exit 1
}

# Set the new vhost conf file in place
cp /tmp/files/http/httpd-vhosts.conf "${vhost_file}"

# Set Apache directory
ESCAPED_SITE_ROOT=$(echo "$root_path" | sed 's/\(\W\)/\\\1/g');
sed -i s/"\/usr\/local\/apache2\/htdocs"/"$ESCAPED_SITE_ROOT"/ "${vhost_file}";
e_catch $? "httpd-vhosts.conf update"

# REVIEW Can this be set up with `adduser`, as originally was the case?
# adduser --disabled-password --no-create-home --gecos "" "$@" >/dev/null
# # Set permissions for the home folder since it's not owned by the new user
# # due to having been created by Vagrant as a sync folder
# if [[ "$(stat -c '%U' /home/${USER_NAME})" != "${USER_NAME}" ]]; then
#   chown "${USER_NAME}":"${USER_NAME}" "/home/${USER_NAME}"
# fi
#
# -g The group name or number of the user's initial login group. The group name must exist.
# -o Allow the creation of a user account with a duplicate (non-unique) UID.
# -s The name of the user's login shell.
# -u The numerical value of the user's ID. This value must be unique, unless the -o option is used.
#   The value must be non-negative. The default is to use the smallest ID value greater than 999
#   and greater than every other user. Values between 0 and 999 are typically reserved for system accounts.
# useradd -g users -s /bin/bash $username -u $uid
# if [[ ! "$(grep username /etc/passwd)" ]]; then
#   adduser --no-create-home --gecos '' --ingroup users --shell /bin/bash $username
#   cp -R /home/vagrant/.ssh "/home/${username}/.ssh"
#   echo -e "vagrant\nvagrant" | (passwd $username)
#   cp /home/vagrant/.profile "/home/${username}/.profile"
#   echo "${username} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
#   chown -R $username "/home/${username}"
# fi

# ServerName
sed -i s/"\(ServerName\ \)\w*\.\w*"/"\1${host}/" "${vhost_file}"

# Update vhost file for SSL
if [[ 'true' == $ssl ]]; then
  # Listen 443
  sed -i 's/\(#\ \)\(Listen\ \)\(80\)/\2443/' "${vhost_file}"
  # <VirtualHost *:443>
  sed -i 's/\*:80/\*:443/' "${vhost_file}"
  # SSLEngine on
  sed -i 's/\(SSLEngine\ \)\w*/\1on/' "${vhost_file}"
  # SSLCertificateFile
  sed -i s/'\(#\ \)\(SSLCertificateFile\ \)\(\/usr\/local\/apache2\/conf\/\)\w*\.crt'/"\2\3${box_name}\.crt"/ "${vhost_file}"
  # SSLCertificateKeyFile
  sed -i s/'\(#\ \)\(SSLCertificateKeyFile\ \)\(\/usr\/local\/apache2\/conf\/\)\w*\.key'/"\2\3${box_name}\.key"/ "${vhost_file}"

  e_catch $? "SSL setup"
  echo "For best results, add the certificate to your keychain"
fi

# Change ownership to Apache user
# TODO The public folder must be created before this point
if [[ ! -d "${root_path}" ]]; then
  mkdir -p "${root_path}"
fi
# REVIEW Should this be $username:www-data?
chown -R www-data:www-data "${root_path}"
e_catch $? "Permissions update"

# Restart Apache
/usr/local/apache2/bin/apachectl restart >/dev/null;
e_catch $? "Apache restart"

echo

[[ $? -lt 1 ]] && echo -e "User setup complete.\n"

echo ">>> end user_setup"
