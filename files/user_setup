#!/bin/bash

trap "clean_and_exit" TERM INT

# Ensure the script is run as SU
if [ "$(whoami)" != "root" ]; then
  echo
  echo "x ... failed! Rerun as root (sudo user_setup)";
  echo
  exit 1
fi


# Tracking status throughout helps ensure all values are collected and all
# steps are passing.
#   1 - Username collected
#   2 - Site root directory collected
#   3 - Project root collected
#   4 - Collected values confirmed || script automated
status=0
# Base for user directory
USER_DIR="/home"
# httpd-vhost.conf values; original and backup
VHOST_CONF="/usr/local/apache2/conf/extra/httpd-vhosts.conf"
BAK_FILE="/tmp/httpd-vhosts.conf_original"
# Unless otherwise specified, project files will be found in `web`
DEFAULT_PROJECT_DIR="web"


# Catch errors and provide feedback
# Passing --clean as the last argument runs `clean_and_exit`
function e_catch {
  PASS=false
  CLEAN=false

  for opt in $@; do
    case $opt in
            0)  PASS=true             ;;
      --clean)  CLEAN=true            ;;
            *)  MESSAGE=${@%%--clean} ;;
    esac
  done;

  if $PASS; then
    echo " âœ“ ... ${MESSAGE:2}"
  else
    echo
    echo " x ... ${MESSAGE:2} failed!"
    $CLEAN && clean_and_exit
    ! $CLEAN && exit 1
  fi
}


# Cleanup and exit
function clean_and_exit {
  # Remove the user if it exists
  if $(getent passwd "$USER_NAME" >/dev/null); then
    userdel -r "$USER_NAME"
    e_catch $? "Delete user '$USER_NAME'"
  fi
  echo
  # Reset httpd-vhosts.conf_original
  conf_do -d
  # Restart Apache
  apachectl restart;
  echo
  echo "Exiting..."
  echo
  exit 1
}


# Remove any extra slashed from the path
# Extra slashes could result from improper input
function trim_extra_slashes {
  CLEANED_PROJECT_ROOT=$(echo "$@" | sed 's/\(\/\{2,\}\)/\//g')
}


# Backup and restore the httpd-vhosts.conf
function conf_do {
  if [[ "$@" == "-b" ]] && [[ -r $VHOST_CONF ]] ; then
    # Backup the .conf file
    cp $VHOST_CONF $BAK_FILE
    e_catch $? "httpd-vhosts.conf backup" --clean
  elif [[  "$@" == "-d"  ]] && [[ -r $BAK_FILE ]]; then
    # Restore the .conf file
    cp $BAK_FILE $VHOST_CONF
    # Delete the backup
    rm -f $BAK_FILE
    e_catch $? "httpd-vhosts.conf restore"
  fi
}


if [[ -n $DREAMBOX_USER_NAME && -n $DREAMBOX_SITE_ROOT && -n $DREAMBOX_PROJECT_DIR ]]; then
  # Set variables based on passed ENV variables
  USER_NAME="$DREAMBOX_USER_NAME"
  USER_DIR="$USER_DIR/$USER_NAME"
  SITE_ROOT="$USER_DIR/$DREAMBOX_SITE_ROOT"
  PROJECT_ROOT="/vagrant/$DREAMBOX_PROJECT_DIR"
  CERT_NAME="${DREAMBOX_SITE_ROOT//\.*/}"

  # Setting status to 4 allows for automating in non-interactive shells, such
  # as during Vagrant provisioning
  status=4
fi


if [[ $status -eq 0 ]]; then
  echo
  echo
  echo
  echo "DreamBox is meant to replicate DreamHost's shared hosting environment."
  echo "In order to ensure your local setup matches that of your hosting"
  echo "environment, enter the same username you use to log in to your server."
  echo

  # > Prompt for username
  while [[ $status -eq 0 ]]; do
    printf "What is your username? "
    read USER_NAME
    # Test for input
    if [[ "x$USER_NAME" != "x" ]]; then
      # Save path: /home/user
      USER_DIR="$USER_DIR/$USER_NAME"
      status=1;
    else
      echo "x ... You must enter a username..."
      echo
    fi
  done
fi


if [[ $status -eq 1 ]]; then
  echo
  echo
  echo
  echo "Your public web files are stored and served from the site's root"
  echo "directory, which by default is named after your domain (example.com)."
  echo

  # > Prompt for site directory
  while [[ $status -eq 1 ]]; do
    printf "What is the name of your site's root directory? "
    read REPLY
    # Test for input
    if [[ "x$REPLY" != "x" ]]; then
      # Build path: /home/user/site
      SITE_ROOT="$USER_DIR/$REPLY"
      status=2;
      unset REPLY
    else
      echo "x ... You must enter a root directory name..."
      echo
    fi
  done
fi

if [[ $status -eq 2 ]]; then
  echo
  echo
  echo
  echo "Enter the name of the directory within which DreamBox will find your"
  echo "site's files, relative to your Vagrantfile (or press return for '$DEFAULT_PROJECT_DIR')."
  echo

  # > Prompt for project directory
  while [[ $status -eq 2 ]]; do
    printf "Local files are found in [$DEFAULT_PROJECT_DIR] "
    read REPLY

    # Default to /vagrant/web if unanswered
    PROJECT_ROOT="/vagrant/${REPLY:=$DEFAULT_PROJECT_DIR}";
    status=3
    unset REPLY
  done
fi


# Remove any extra slashed from the path
trim_extra_slashes "$PROJECT_ROOT"


if [[ $status -eq 3 ]]; then
  # > Prompt for confirmation
  echo
  echo "---"
  echo
  echo "The site's root will be at $SITE_ROOT, which is"
  echo "synced to '$CLEANED_PROJECT_ROOT' by Vagrant."
  echo
  printf "Proceed with these changes? [Y/n]"
  read REPLY

  if [[ "$REPLY" = "n" ]]; then
    clean_and_exit
  else
    status=4
  fi
fi


if [[ $status -eq 4 ]]; then
  echo

  # Backup httpd-vhosts.conf
  conf_do -b

  # Create the SSL certificate
  [[ $ENABLE_SSL ]] && source ssl_setup;

  # Set Apache directory
  ESCAPED_SITE_ROOT=$(echo "$SITE_ROOT" | sed 's/\(\W\)/\\\1/g');
  sed -i s/"\/usr\/local\/apache2\/htdocs"/"$ESCAPED_SITE_ROOT"/ $VHOST_CONF;
  e_catch $? "httpd-vhosts.conf update" --clean

  # Change ownership to Apache user
  chown -R www-data:www-data "$SITE_ROOT"
  e_catch $? "Permissions update" --clean

  # Restart Apache
  /usr/local/apache2/bin/apachectl restart >/dev/null;
  e_catch $? "Apache restart"
fi
echo

[[ $? -lt 1 ]] && echo -e "User setup complete.\n"
[[ $ENABLE_SSL ]] && echo -e "For best results, add the certificate to your keychain"
