#!/bin/bash

#
# Build script for the Dreambox.
#

set -e;

# Help text.
function show_help() {

cat <<EOT
Usage:

  ./$(basename "$0") [virtualbox|vmware]

  If no option is passed, both will be built.
EOT

}

if [[ $# -gt 0 ]]; then
  # Test for known flags.
  for OPT in "${@}";
  do
    case "${OPT}" in
      virtualbox)  ONLY='-only=virtualbox-iso' ;;               # Suppresses installing packages.
          vmware)  ONLY='-only=vmware-iso' ;;
               *)  echo -e "Warning: invalid option \`${OPT}\`\n" && show_help && exit ;;
    esac
  done;
fi;

vagrant destroy;

# Remove from VirtualBox.
# Useful for quickly re-running failed builds.
# @review `packer -force` may take care of this
# VM_ID=$(vboxmanage list runningvms | grep -oP "dreambox\"\s{(.*)}.*" | sed -E 's/.*{(.*)}/\1/');
# if [[ -n $VM_ID ]]; then
#   vboxmanage controlvm $VM_ID poweroff && vboxmanage unregistervm $VM_ID --delete;
# fi;

# Remove the output directories
rm -rf output-vmware-iso/;
rm -rf output-virtualbox-iso/;

if [[ ! -d '_builds' ]]; then
  # Create the _builds directory.
  mkdir '_builds';
else
  # Clear the _builds directory, rather than forcing the build.
  rm -f _builds/*;
fi;

# Remove the box from Vagrant to avoid collisions.
[[ $(vagrant box remove --force --all dreambox_pre/virtualbox 2> /dev/null) ]] || echo 'No Vagrant box to remove...';
[[ $(vagrant box remove --force --all dreambox_pre/vmware 2> /dev/null) ]] || echo 'No Vagrant box to remove...';

# Build.
packer build ${ONLY} -force -parallel=false -var-file=templates/common.json templates/dreambox.json;

# Add the box to vagrant as 'dreambox_pre'.
if [ -n "${ONLY}" ]; then
  vagrant box add --force dreambox_pre/${@} _builds/dreambox.${@}.*.box;
else
  vagrant box add --force dreambox_pre/virtualbox _builds/dreambox.virtualbox.*.box;
  vagrant box add --force dreambox_pre/vmware _builds/dreambox.vmware.*.box;
fi;

exit $?;
